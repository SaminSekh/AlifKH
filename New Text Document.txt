// Notice   ###################################################
setTimeout(() => {
  // üî∏ ‡¶∏‡¶¨ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßã
  const messages = [
    "‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!",
    // "üÜï ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶è‡¶ñ‡¶® ‡¶≤‡¶æ‡¶á‡¶≠!",
    // "üöö ‡¶Ü‡¶ú ‡¶∞‡¶æ‡¶§ ‡ßß‡ß®‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶´‡ßç‡¶∞‡¶ø ‡¶∂‡¶ø‡¶™‡¶ø‡¶Ç ‡¶Ö‡¶´‡¶æ‡¶∞!",
    // "üëâ <a href='https://t.me/Alifkhres' target='_blank' style='color:#007bff;text-decoration:none;font-weight:600;'>‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®</a>"
  ];

  // Overlay ‡¶§‡ßà‡¶∞‡¶ø
  const popup = document.createElement("div");
  Object.assign(popup.style, {
    position: "fixed",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background: "rgba(0, 0, 0, 0.52)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 9999,
    animation: "fadeIn 0.4s ease",
  });

  // Box ‡¶§‡ßà‡¶∞‡¶ø
  const box = document.createElement("div");
  Object.assign(box.style, {
    background: "linear-gradient(135deg, #ffffff, #f9f9f9)",
    padding: "30px 25px",
    borderRadius: "18px",
    boxShadow: "0 8px 20px rgba(0,0,0,0.25)",
    textAlign: "left",
    position: "relative",
    maxWidth: "90%",
    width: "420px",
    fontFamily: "Poppins, sans-serif",
    transform: "scale(0.9)",
    transition: "transform 0.3s ease",
  });
  setTimeout(() => (box.style.transform = "scale(1)"), 50);

  // Close ‡¶¨‡¶æ‡¶ü‡¶® (X)
  const closeBtn = document.createElement("span");
  closeBtn.innerHTML = "&times;";
  Object.assign(closeBtn.style, {
    position: "absolute",
    top: "10px",
    right: "15px",
    cursor: "pointer",
    fontSize: "30px",
    color: "#ffffff",
    fontWeight: "bold",
  });
     closeBtn.onclick = () => document.body.removeChild(popup);

  // ‡¶π‡ßá‡¶°‡¶æ‡¶∞
  const header = document.createElement("h3");
  header.textContent = "üì¢ AlifKH";
  Object.assign(header.style, {
    textAlign: "center",
    marginBottom: "15px",
    color: "#111",
    fontSize: "20px",
  });

  // ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü
  const list = document.createElement("ul");
  Object.assign(list.style, {
    listStyle: "none",
    padding: "0",
    margin: "0 0 20px 0",
  });

  messages.forEach((text) => {
    const item = document.createElement("li");
    item.innerHTML = text;
    Object.assign(item.style, {
      background: "#f0f4ff",
      margin: "8px 0",
      padding: "10px 12px",
      borderRadius: "8px",
      fontSize: "16px",
      color: "#222",
      lineHeight: "1.5",
    });
    list.appendChild(item);
  });

  // OK ‡¶¨‡¶æ‡¶ü‡¶®
  const okBtn = document.createElement("button");
  okBtn.textContent = "OK";
  Object.assign(okBtn.style, {
    background: "linear-gradient(135deg, #007bff, #0056d4)",
    color: "#fff",
    border: "none",
    padding: "10px 20px",
    borderRadius: "8px",
    cursor: "pointer",
    fontSize: "16px",
    fontWeight: "500",
    display: "block",
    margin: "0 auto",
    transition: "background 0.3s ease",
  });
  okBtn.onmouseover = () =>
    (okBtn.style.background = "linear-gradient(135deg, #0056d4, #0041a8)");
  okBtn.onmouseleave = () =>
    (okBtn.style.background = "linear-gradient(135deg, #007bff, #0056d4)");
  okBtn.onclick = () => document.body.removeChild(popup);

  // ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
  box.appendChild(closeBtn);
  box.appendChild(header);
  box.appendChild(list);
  box.appendChild(okBtn);
  popup.appendChild(box);
  document.body.appendChild(popup);
}, 10);



// Hamburger Menu Toggle    ###################################################
const hamburger = document.getElementById('hamburger');
const navSidebar = document.getElementById('navSidebar');
const closeNav = document.getElementById('closeNav');

function toggleNav() {
    navSidebar.classList.toggle('active');
}

hamburger.addEventListener('click', toggleNav);
closeNav.addEventListener('click', toggleNav);

// Update setupEventListeners to include navigation links closing the sidebar
function setupEventListeners() {
    cartIcon.addEventListener('click', toggleCart);
    closeCart.addEventListener('click', toggleCart);
    
    categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
            categoryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            currentCategory = this.getAttribute('data-category');
            displayMenuItems();
        });
    });
    
    searchInput.addEventListener('input', displayMenuItems);
    
    applyDiscountBtn.addEventListener('click', applyDiscount);
    discountCodeInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            applyDiscount();
        }
    });
    
    checkoutBtn.addEventListener('click', function() {
        if (cart.length === 0) {
            alert('Your cart is empty!');
            return;
        }
        toggleCart();
        orderModal.classList.add('active');
    });
    
    orderOptions.forEach(option => {
        option.addEventListener('click', function() {
            orderOptions.forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');
            selectedOrderMethod = this.getAttribute('data-method');
        });
    });
    
    confirmOrder.addEventListener('click', function() {
        if (!selectedOrderMethod) {
            alert('Please select an order method');
            return;
        }
        
        sendOrder(selectedOrderMethod);
        orderModal.classList.remove('active');
        successModal.classList.add('active');
        
        cart = [];
        appliedDiscount = 0;
        appliedDiscountCode = '';
        updateCart();
        saveCartToStorage();
    });
    
    closeSuccess.addEventListener('click', function() {
        successModal.classList.remove('active');
    });

    // Add click event to navigation links to close sidebar
    document.querySelectorAll('.nav-sidebar ul li a').forEach(link => {
        link.addEventListener('click', toggleNav);
    });
}
        
        
                 const menuItems = [

            { id: 1, name: "Pani puri/ Fuchka (10pcs)", category: "fastfood", price: 2.5, originalPrice: 4, discount: 38, description: "Crispy Indian pani puri / fuchka served with tangy tamarind water ‚Äì a popular Bangladeshi street food in Sihanoukville, perfect for halal snack lovers and Indian food tourists.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Pani-Poori.jpg" },

            { id: 2, name: "Pani puri/ Fuchka (50pcs)", category: "fastfood", price: 10, originalPrice: 20, discount: 50, description: "Party-size platter of authentic Indian & Bangladeshi fuchka, ideal for families or late-night gatherings at our 24/7 Indian restaurant Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/pani_puri_90458_16x9.jpg" },

            { id: 3, name: "Dal Puri (4pcs)", category: "fastfood", price: 2.7, originalPrice: 4, discount: 33, description: "Fluffy Bengali dal puri stuffed with spiced lentils, a must-try Bangla halal food for expats craving home taste.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/66426523_384937842159724_1394540683754209280_o.jpg" },

            { id: 4, name: "Jhal Muri", category: "fastfood", price: 1, originalPrice: 2, discount: 50, description: "Traditional Kolkata jhal muri ‚Äì spicy puffed rice mixed with vegetables and masala, a famous Indian street food Sihanoukville snack.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Jhal-Muri-2-3.jpg" },

            { id: 5, name: "Special Jhal Muri (curry)", category: "fastfood", price: 1.5, originalPrice: 3, discount: 50, description: "Premium jhal muri with curry twist, bringing authentic Bangladeshi cuisine to Sihanoukville night food lovers.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/jhal-muri-masala-puffed-rice.jpg" },

            { id: 6, name: "Alur chop (5pcs)", category: "fastfood", price: 2, originalPrice: 5, discount: 60, description: "Golden potato fritters loved by Indian expats and travelers looking for budget-friendly halal snacks.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/%E0%A6%86%E0%A6%B2%E0%A7%81%E0%A6%B0_%E0%A6%9A%E0%A6%AA.jpg" },

            { id: 7, name: "Piayaju (5pcs)", category: "fastfood", price: 2, originalPrice: 5, discount: 60, description: "Crunchy lentil fritters, a top pick for Pakistani expats and those exploring Sihanoukville Indian food spots.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/piaju%20(1).jpg" },

            { id: 8, name: "Beguni (5pcs)", category: "fastfood", price: 2, originalPrice: 5, discount: 60, description: "Fried eggplant slices coated in gram-flour batter ‚Äì a classic Bangladeshi halal restaurant delicacy.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/img_2127.jpg" },

            { id: 9, name: "Chola Makha", category: "fastfood", price: 1, originalPrice: 2, discount: 50, description: "Spicy chickpeas tossed with herbs, a healthy Indian takeaway Sihanoukville favorite.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/4-min-chola-makha-or-black-chana-chaat-recipe-main-photo.jpg" },

            { id: 10, name: "Special Chola Makha", category: "fastfood", price: 1.5, originalPrice: 3.5, discount: 57, description: "Chola makha upgrade with extra spices,Upgraded chickpea salad for late-night 24h food delivery in Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/hq720.jpg" },

            { id: 11, name: "Egg Roll", category: "fastfood", price: 1.5, originalPrice: 3, discount: 50, description: "Paratha wrapped around a spiced egg omelet with onions and sauces. Hot, savory, and satisfying, served with ketchup or spicy chutney.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Kolkata%20egg%20roll.jpg" },

            { id: 12, name: "Premium Egg Roll", category: "fastfood", price: 2, originalPrice: 5, discount: 60, description: "Kolkata-style egg roll stuffed with fresh veggies ‚Äì a quick Indian food delivery snack for tourists.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/californian-egg-roll-main-header-anz.jpg" },

            { id: 13, name: "Chicken Roll", category: "fastfood", price: 2, originalPrice: 5, discount: 60, description: "Juicy halal chicken wrapped in soft paratha, perfect for Sihanoukville night food cravings.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Chicken-Kathi-Roll-500x375.jpg" },

            { id: 14, name: "Chow Mein (Egg)", category: "fastfood", price: 2, originalPrice: 3.5, discount: 43, description: "Stir-fried noodles with egg and vegetables, a popular Indian Chinese fusion food Sihanoukville dish.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Cantonese-Chow-Mein-noodle-pull.jpg" },

            { id: 15, name: "Premium Chow Mein (Chicken)", category: "fastfood", price: 2.5, originalPrice: 5, discount: 50, description: "Chicken-loaded chow mein loved by late-night foodies and 24/7 Indian restaurant visitors.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/chicken-chow-mein-1.jpg" },

            { id: 16, name: "Egg Toast (2pcs)", category: "fastfood", price: 2, originalPrice: 4, discount: 50, description: "Simple yet delicious Indian breakfast Sihanoukville choice, ideal for early morning takeaway.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Egg%20Toast%20(2pcs).jpg" },

            { id: 17, name: "Chicken Burger", category: "fastfood", price: 2.5, originalPrice: 4, discount: 38, description: "Halal burgers with Indian spices, a unique desi food Sihanoukville twist.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/1725393944-moist-chicken-burgers.jpg" },

            { id: 18, name: "Beetf Burger", category: "fastfood", price: 2.9, originalPrice: 6, discount: 52, description: "Premium Halal burgers with Indian spices, a unique desi food Sihanoukville twist.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/mac_poulet_corn_flakes.jpeg" },

            { id: 19, name: "Paratha (2 pcs)", category: "fastfood", price: 1.5, originalPrice: 2, discount: 25, description: "Freshly made flaky paratha, served hot at our Al-If Indian restaurant Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/TriangleParathaFeaturedImage.jpg" },

            { id: 20, name: "Mughlai with Potato curry", category: "fastfood", price: 2, originalPrice: 3, discount: 33, description: "Authentic Mughlai paratha stuffed with egg and served with potato curry ‚Äì a must for Indian expats in Cambodia.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/MuttonMughlaiParatha.jpg" },

            { id: 21, name: "Chatpati", category: "fastfood", price: 1, originalPrice: 2.5, discount: 60, description: "Tangy chickpea mix known as Bangladeshi chatpati, a street food classic from Dhaka to Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/fry-chatpati-chaat-recipe-main-photo.jpg" },

            { id: 25, name: "Rice / Vat (1 person)", category: "meals", price: 0.8, originalPrice: 1.5, discount: 47, description: "Steamed rice served with side dishes ‚Äì the heart of Bangladeshi cuisine Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/basmati-rice-recipe.jpg" },

            { id: 26, name: "Roti", category: "meals", price: 0.4, originalPrice: 1, discount: 60, description: "Soft, round flatbread made from wheat flour, lightly roasted on a griddle in Sihanoukville. A versatile staple served with curries, vegetables, or lentils, perfect for breakfast, lunch, or dinner.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Roti.jpg" },

            { id: 27, name: "Mosur Dal", category: "meals", price: 0.7, originalPrice: 1, discount: 30, description: "Comforting red lentil soup loved by fans of Indian home-style cooking in Cambodia.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Bengali-Masoor-Dal-2-3.jpg" },

            { id: 28, name: "Vegetable Curry", category: "meals", price: 0.8, originalPrice: 2, discount: 60, description: "Mixed vegetables cooked with cumin, turmeric, and coriander. A healthy side dish served with rice or paratha.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Indian-vegetable-curry.jpg" },

            { id: 29, name: "Bharta", category: "meals", price: 0.7, originalPrice: 1.5, discount: 53, description: "Mashed vegetables, often eggplant or potato, seasoned with spices. Smoky and flavorful, perfect with rice or flatbread.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/received-667070851118864-20211230080946.jpeg" },

            { id: 30, name: "Beef", category: "meals", price: 3, originalPrice: 5, discount: 40, description: "Tender beef slow-cooked with cumin, coriander, and garam masala. available for 24h food delivery Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/beef-curry.jpg" },

            { id: 31, name: "Mutton", category: "meals", price: 4.5, originalPrice: 6, discount: 25, description: "Slow-cooked goat meat in spiced gravy with onions and garlic. Bangla food 24h delivery Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Mutton.png" },

            { id: 32, name: "Chicken", category: "meals", price: 2.2, originalPrice: 3.5, discount: 37, description: "Chicken curry cooked with tomatoes, onions, and garam masala. Bangladeshi food 24h delivery Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Chicken.jpg" },

            { id: 33, name: "Rui Fish", category: "meals", price: 3, originalPrice: 5, discount: 40, description: "Rohu fish simmered in spiced curry with mustard oil at our 24/7 Bangladeshi restaurant.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/mach.jpg" },

            { id: 34, name: "Tangra Fish", category: "meals", price: 3, originalPrice: 5, discount: 40, description: "Tangra fish cooked in a light, spicy curry or fried with spices. Delicate and flavorful, served with rice.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/bethica-das15240249455ad6c6713b05c.jpeg" },

            { id: 35, name: "Prawn Curry", category: "meals", price: 3, originalPrice: 5, discount: 40, description: "Prawns cooked in a rich, coconut-based curry. Spicy and aromatic, perfect with rice or paratha.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/prawn-curry-goan-style.jpg" },

            { id: 36, name: "Beef Khichuri", category: "mealspackage", price: 4.5, originalPrice: 7, discount: 36, description: "Spiced rice and lentils cooked together with vegetables or meat. Comforting and hearty, garnished with fried onions or ghee.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/hq720%20(1).jpg" },

            { id: 37, name: "Beef Biryani", category: "mealspackage", price: 5, originalPrice: 7, discount: 29, description: "Fragrant rice layered with spiced beef and saffron. A festive biryani served with raita or salad.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Beef-Biryani-Rida-Aftab.jpg" },

            { id: 38, name: "Mutton Biryani", category: "mealspackage", price: 6, originalPrice: 7.5, discount: 20, description: "Aromatic mutton biryani with caramelized onions and rich spices. A luxurious celebratory dish.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Best-Mutton-Biryani-Recipe.jpg" },

            { id: 39, name: "Chicken Biryani", category: "mealspackage", price: 4, originalPrice: 6, discount: 33, description: "Chicken biryani layered with fragrant rice and marinated chicken. Loved for its rich aroma and bold flavor.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/d815e816-4664-472e-990b-d880be41499f%20-%20chicken-biryani-recipe.jpg" },

            { id: 40, name: "Rice+Fish+Veg+Dal", category: "mealspackage", price: 4, originalPrice: 7, discount: 43, description: "Steamed white rice served with spiced fish curry, seasonal vegetables, and comforting red lentil dal. A balanced Bangladeshi meal offering mild heat and rich, homely flavors.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Rice%2BFish%2BVeg%2BDal.jpeg" },

            { id: 41, name: "Rice+Beef+Veg+Dal", category: "mealspackage", price: 4, originalPrice: 6, discount: 33, description: "Fluffy rice paired with slow-cooked beef curry, fresh vegetables, and hearty lentil dal. A filling, protein-rich platter with deep, aromatic spices.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Rice%2BBeef%2BVeg%2BDal.png" },

            { id: 42, name: "Rice+Mutton+Veg+Dal", category: "mealspackage", price: 5, originalPrice: 7, discount: 29, description: "Steamed rice served with tender mutton curry, mixed vegetables, and flavorful lentil dal. A classic, festive Bangladeshi combination full of rich, savory taste.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Rice%20%2B%20Mutton%20%2B%20Veg%2B%20Dal.webp" },

            { id: 43, name: "Rice+Chicken+Veg+Dal", category: "mealspackage", price: 3.5, originalPrice: 5, discount: 30, description: "Soft white rice, spiced chicken curry, seasonal vegetables, and lentil dal - free home delivery at sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Rice%2BChicken%2BVeg%2BDal.jpeg" },

            { id: 46, name: "Mango (1KG)", category: "fruits", price: 1.2, originalPrice: 1.5, discount: 20, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/p06hk0h6.jpg" },

            { id: 47, name: "Pinapple (2pc - Medium)", category: "fruits", price: 1.5, originalPrice: 2, discount: 25, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/l-intro-1736378192.jpg" },

            { id: 48, name: "Apple (1KG)", category: "fruits", price: 5, originalPrice: 6, discount: 17, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/apples-at-farmers-market-royalty-free-image-1627321463.jpg" },

            { id: 49, name: "Grape (1KG)", category: "fruits", price: 5, originalPrice: 7, discount: 29, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Grape%20(1%20KG).jpg" },

            { id: 50, name: "Banana (8pcs)", category: "fruits", price: 1, originalPrice: 1.5, discount: 33, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/NORMALLLL.jpg" },

            { id: 54, name: "Dragon Fruite (1KG)", category: "fruits", price: 1.5, originalPrice: 3, discount: 50, description: "", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/dragonfruit.jpg" },

            { id: 63, name: "Mango Juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Sweet, thick mango juice blended from ripe mangoes ‚Äì loved by Indian tourists in Sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/10-benefits-of-mango-juice-3.jpg" },

            { id: 64, name: "Pinapple Juice", category: "drinks", price: 2, originalPrice: 3.5, discount: 43, description: "Fresh pineapple juice, sweet and tangy, served chilled with optional salt or sugar.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/kuvings-blog-pineapple.png" },

            { id: 65, name: "Apple Juice", category: "drinks", price: 2.5, originalPrice: 4, discount: 38, description: "Clear, refreshing apple juice, lightly sweetened and sometimes mixed with lemon.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/ZDIxNjE5ZTAtYjlhMi00ZTlmLTkxNTktODZiODA1YzkxNmFh_apple-juice-hero.jpg" },

            { id: 66, name: "Grape Juice", category: "drinks", price: 2.5, originalPrice: 4, discount: 38, description: "Sweet, slightly tart grape juice, served chilled for a rich fruity taste.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Grape%20Juice.webp" },

            { id: 67, name: "Orange juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Freshly squeezed juice from ripe oranges, naturally sweet and tangy. Served chilled for a refreshing, vitamin-rich drink that‚Äôs perfect for hot days or a healthy breakfast boost.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/orange-juice.png" },

            { id: 68, name: "Banana Juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Creamy banana smoothie made with milk or yogurt, sweetened with honey or sugar.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Banana%20Juice.jpeg" },

            { id: 69, name: "Wattermelon Juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Light, hydrating watermelon juice, chilled with a dash of lemon or mint.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Watermelon-Juice-Square.jpg" },

            { id: 70, name: "Carrot Juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Sweet carrot juice, rich in vitamins, sometimes spiced with ginger and lemon.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Orange-Carrot-Juice-1-of-1.jpeg" },

            { id: 71, name: "Coconut", category: "drinks", price: 0.8, originalPrice: 2, discount: 60, description: "Naturally sweet coconut water, served straight from green coconuts for ultimate refreshment.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/shutterstock_490174816.jpg" },

            { id: 72, name: "Avocado Juice", category: "drinks", price: 1, originalPrice: 1.8, discount: 44, description: "Creamy avocado juice blended with milk or sugar, sometimes drizzled with honey.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Avocado%20Juice.webp" },

            { id: 73, name: "Dragon Fruite Juice", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Mildly sweet dragon fruit juice, chilled and sometimes mixed with other fruits.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/066A4091_adobe_express.jpeg" },

            { id: 74, name: "Mixed Fruit Juice", category: "drinks", price: 2, originalPrice: 3.5, discount: 43, description: "Mixed fruit juice made from seasonal fruits like mango, pineapple, or banana, served chilled.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Mixed-Fruits.jpg" },

            { id: 75, name: "Sweet Lassi", category: "drinks", price: 2, originalPrice: 3.5, discount: 43, description: "Traditional lassi made from yogurt and sugar ‚Äì a cooling drink for halal food Sihanoukville meals.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/sweet-lassi-recipe-featured.jpg" },

            { id: 76, name: "Black Coffee", category: "drinks", price: 0.75, originalPrice: 1.8, discount: 58, description: "Strong, unsweetened black coffee brewed from roasted beans, served hot or cold.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/alin-luna-t4bpI1lXVH0-unsplash-scaled.jpg" },

            { id: 77, name: "Hot Coffee", category: "drinks", price: 0.75, originalPrice: 1.8, discount: 58, description: "Coffee with milk and sugar, served steaming hot for a comforting drink.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/istockphoto-509141291-612x612.jpg" },

            { id: 78, name: "Cold Coffee", category: "drinks", price: 0.75, originalPrice: 1.8, discount: 58, description: "Chilled coffee blended with milk, sugar, and ice cream for a creamy treat.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Mocha-Iced-Coffee-with-Vanilla-Cold-Foam-800x550-1.jpg" },

            { id: 79, name: "Black Coffee Premium", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Premium black coffee brewed for bold flavor, served hot or iced.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/Black%20Coffee%20Premium.png" },

            { id: 80, name: "Hot Coffee Premium", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Premium coffee blended with milk and sugar for a smooth, rich taste.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/cup-of-black-coffee-scaled-720x540.jpeg" },

            { id: 81, name: "Cold Coffee Premium", category: "drinks", price: 1.5, originalPrice: 3, discount: 50, description: "Chilled coffee with premium beans, milk, and ice cream for a luxurious drink.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/cold-coffee.jpg" },

            { id: 82, name: "Dudh Cha (1pcs) ", category: "drinks", price: 0.8, originalPrice: 1, discount: 20, description: "Milky chai brewed with tea, sugar, and cardamom at bangladeshi resturant in sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/41093853795_47e4cd703b_b.jpg" },

            { id: 84, name: "Rong Cha (1pcs)", category: "drinks", price: 0.5, originalPrice: 1, discount: 50, description: "Plain black tea brewed without milk, lightly sweetened or unsweetened at alifkh resturant sihanoukville.", image: "https://raw.githubusercontent.com/SaminSekh/AlifKH/main/alifimage/rong-cha.jpg" },


];      
        

        
        




// Advanced Discount codes off codes%%%%%%%%%%%%%%%%%%% #######################
const discountCodes = {
    // Fixed discount on entire order
    "FREE1D": { type: "fixed", value: 1, description: "$1 off entire order" },
    
    // Percentage discount on entire order
    "FREE10%": { type: "percentage", value: 10, description: "10% off entire order" },
    
    // Category-specific percentage discount
    "SPDRINK": { type: "category_percentage", value: 10, category: "drinks", description: "10% off all drinks" },
    
    // Category-specific fixed discount
    "SPDRINKS": { type: "category_fixed", value: 1, category: "drinks", description: "$1 off all drinks" },
    
    // Product-specific percentage discount
    "BIRFREE": { type: "product_percentage", value: 50, productName: "biryani", description: "50% off biryani items" },
    
    // Product-specific fixed discount
    "BIRFREE1": { type: "product_fixed", value: 1, productName: "biryani", description: "$1 off biryani items" },
    
    // Minimum order percentage discount
    "FREE10ON10": { type: "min_order_percentage", value: 10, minAmount: 10, description: "10% off on orders over $10" },
    
    // Minimum order fixed discount
    "FREE10ON1": { type: "min_order_fixed", value: 1, minAmount: 10, description: "$1 off on orders over $10" }
};

// Contact information #######################
const whatsappNumber = "+601160916195";
const telegramId = "@alifkhres";

// Cart functionality
let cart = [];
let currentCategory = 'all';
let selectedOrderMethod = '';
let appliedDiscount = 0;
let appliedDiscountCode = '';

// DOM Elements
const menuGrid = document.getElementById('menuGrid');
const cartIcon = document.getElementById('cartIcon');
const cartSidebar = document.getElementById('cartSidebar');
const closeCart = document.getElementById('closeCart');
const cartItems = document.getElementById('cartItems');
const cartSubtotal = document.getElementById('cartSubtotal');
const cartDiscount = document.getElementById('cartDiscount');
const cartTotal = document.getElementById('cartTotal');
const cartCount = document.querySelector('.cart-count');
const checkoutBtn = document.getElementById('checkoutBtn');
const orderModal = document.getElementById('orderModal');
const orderOptions = document.querySelectorAll('.order-option');
const confirmOrder = document.getElementById('confirmOrder');
const successModal = document.getElementById('successModal');
const closeSuccess = document.getElementById('closeSuccess');
const categoryButtons = document.querySelectorAll('.category-btn');
const searchInput = document.getElementById('searchInput');
const discountCodeInput = document.getElementById('discountCode');
const applyDiscountBtn = document.getElementById('applyDiscount');
const discountMessage = document.getElementById('discountMessage');

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
    loadCartFromStorage();
    displayMenuItems();
    setupEventListeners();
    startCarousel();
});

// Display menu items based on category and search
function displayMenuItems() {
    menuGrid.innerHTML = '';
    
    const filteredItems = menuItems.filter(item => {
        const matchesCategory = currentCategory === 'all' || item.category === currentCategory;
        const searchTerm = searchInput.value.toLowerCase();
        const matchesSearch = item.name.toLowerCase().includes(searchTerm) || 
                             item.description.toLowerCase().includes(searchTerm);
        
        return matchesCategory && matchesSearch;
    });
    
    if (filteredItems.length === 0) {
        menuGrid.innerHTML = '<p style="grid-column: 1/-1; text-align: center; padding: 40px;">No items found matching your criteria.</p>';
        return;
    }
    
    filteredItems.forEach(item => {
        const menuItem = document.createElement('div');
        menuItem.className = 'menu-item';
        
        let discountBadge = '';
        if (item.originalPrice) {
            discountBadge = `<div class="discount-badge">${item.discount}% OFF</div>`;
        }
        
        let priceDisplay = `<span class="item-price">$${item.price.toFixed(2)}</span>`;
        if (item.originalPrice) {
            priceDisplay = `
                <span class="item-price">
                    <span class="original-price">$${item.originalPrice.toFixed(2)}</span>
                    $${item.price.toFixed(2)}
                </span>
            `;
        }
        
        menuItem.innerHTML = `
            ${discountBadge}
            <div class="item-image" style="background-image: url('${item.image}')"></div>
            <div class="item-details">
                <h3 class="item-title">${item.name}</h3>
                <p class="item-description">${item.description}</p>
                <div class="item-footer">
                    ${priceDisplay}
                    <button class="add-to-cart" data-id="${item.id}">Add to Cart</button>
                </div>
            </div>
        `;
        menuGrid.appendChild(menuItem);
    });
    
    document.querySelectorAll('.add-to-cart').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = parseInt(this.getAttribute('data-id'));
            addToCart(itemId);
        });
    });
}

// Setup event listeners
function setupEventListeners() {
    cartIcon.addEventListener('click', toggleCart);
    closeCart.addEventListener('click', toggleCart);
    
    categoryButtons.forEach(button => {
        button.addEventListener('click', function() {
            categoryButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            currentCategory = this.getAttribute('data-category');
            displayMenuItems();
        });
    });
    
    searchInput.addEventListener('input', displayMenuItems);
    
    applyDiscountBtn.addEventListener('click', applyDiscount);
    discountCodeInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            applyDiscount();
        }
    });
    
    checkoutBtn.addEventListener('click', function() {
        if (cart.length === 0) {
            alert('Your cart is empty!');
            return;
        }
        toggleCart();
        orderModal.classList.add('active');
    });
    
    orderOptions.forEach(option => {
        option.addEventListener('click', function() {
            orderOptions.forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');
            selectedOrderMethod = this.getAttribute('data-method');
        });
    });
    
    confirmOrder.addEventListener('click', function() {
        if (!selectedOrderMethod) {
            alert('Please select an order method');
            return;
        }
        
        // Send order via selected method (no customer info needed)
        sendOrder(selectedOrderMethod);
        
        // Show success message
        orderModal.classList.remove('active');
        successModal.classList.add('active');
        
        // Clear the cart
        cart = [];
        appliedDiscount = 0;
        appliedDiscountCode = '';
        updateCart();
        saveCartToStorage();
    });
    
    closeSuccess.addEventListener('click', function() {
        successModal.classList.remove('active');
    });
}

// Cart functions
function toggleCart() {
    cartSidebar.classList.toggle('active');
}

function addToCart(itemId) {
    const item = menuItems.find(i => i.id === itemId);
    const existingItem = cart.find(i => i.id === itemId);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            id: item.id,
            name: item.name,
            price: item.price,
            image: item.image,
            quantity: 1
        });
    }
    
    updateCart();
    saveCartToStorage();
    showAddToCartAnimation(itemId);
}

function updateCart() {
    cartItems.innerHTML = '';
    let subtotal = 0;
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p>Your cart is empty</p>';
        cartCount.textContent = '0';
        cartSubtotal.textContent = '0.00';
        cartDiscount.textContent = '0.00';
        cartTotal.textContent = '0.00';
        discountMessage.textContent = '';
        discountCodeInput.value = '';
        appliedDiscount = 0;
        appliedDiscountCode = '';
        
        // Remove service charge display if it exists
        const existingServiceCharge = document.querySelector('.service-charge-row');
        if (existingServiceCharge) {
            existingServiceCharge.remove();
        }
        return;
    }
    
    cart.forEach(item => {
        subtotal += item.price * item.quantity;
        
        const cartItem = document.createElement('div');
        cartItem.className = 'cart-item';
        cartItem.innerHTML = `
            <div class="cart-item-image" style="background-image: url('${item.image}')"></div>
            <div class="cart-item-details">
                <div class="cart-item-title">${item.name}</div>
                <div class="cart-item-price">$${item.price.toFixed(2)}</div>
                <div class="cart-item-controls">
                    <button class="quantity-btn decrease" data-id="${item.id}">-</button>
                    <span class="quantity">${item.quantity}</span>
                    <button class="quantity-btn increase" data-id="${item.id}">+</button>
                    <button class="remove-item" data-id="${item.id}"><i class="fas fa-trash"></i></button>
                </div>
            </div>
        `;
        cartItems.appendChild(cartItem);
    });
    
let discountAmount = appliedDiscount;

// For percentage discounts that need recalculation when cart changes
if (appliedDiscountCode && discountCodes[appliedDiscountCode]) {
    const discount = discountCodes[appliedDiscountCode];
    if (discount.type === "percentage") {
        discountAmount = (subtotal * discount.value) / 100;
    }
    // Recalculate other dynamic discounts if needed
    else if (discount.type === "category_percentage") {
        discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'percentage');
    }
    else if (discount.type === "category_fixed") {
        discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'fixed');
    }
    else if (discount.type === "product_percentage") {
        discountAmount = calculateProductDiscount(discount.productName, discount.value, 'percentage');
    }
    else if (discount.type === "product_fixed") {
        discountAmount = calculateProductDiscount(discount.productName, discount.value, 'fixed');
    }
}

// Update appliedDiscount with the recalculated amount
appliedDiscount = discountAmount;

const totalBeforeServiceCharge = subtotal - discountAmount;

// Apply service charge if order is less than $4 (check ORIGINAL subtotal, not discounted)
let serviceCharge = 0;
if (subtotal < 4) {
    serviceCharge = 1;
}
    
    const total = totalBeforeServiceCharge + serviceCharge;
    
    cartCount.textContent = cart.reduce((sum, item) => sum + item.quantity, 0);
    cartSubtotal.textContent = subtotal.toFixed(2);
    cartDiscount.textContent = discountAmount.toFixed(2);
    cartTotal.textContent = total.toFixed(2);
    
    // Update the cart display to show service charge if applicable
    const existingServiceCharge = document.querySelector('.service-charge-row');
    if (existingServiceCharge) {
        existingServiceCharge.remove();
    }
    
if (serviceCharge > 0) {
    // Add service charge row to the cart summary
    const serviceChargeElement = document.createElement('div');
    serviceChargeElement.className = 'service-charge-row';
    serviceChargeElement.innerHTML = `
        <span>$1 Service Charge bellow $4 order</span>
        <span>$${serviceCharge.toFixed(2)}</span>
    `;
        
        // Insert service charge before the total row
        const cartSummary = document.querySelector('.cart-summary');
        const cartTotalElement = document.querySelector('.cart-total');
        if (cartSummary && cartTotalElement) {
            cartSummary.insertBefore(serviceChargeElement, cartTotalElement);
        }
    }
    
    document.querySelectorAll('.decrease').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = parseInt(this.getAttribute('data-id'));
            decreaseQuantity(itemId);
        });
    });
    
    document.querySelectorAll('.increase').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = parseInt(this.getAttribute('data-id'));
            increaseQuantity(itemId);
        });
    });
    
    document.querySelectorAll('.remove-item').forEach(button => {
        button.addEventListener('click', function() {
            const itemId = parseInt(this.getAttribute('data-id'));
            removeFromCart(itemId);
        });
    });
}

function increaseQuantity(itemId) {
    const item = cart.find(i => i.id === itemId);
    if (item) {
        item.quantity += 1;
        updateCart();
        saveCartToStorage();
    }
}

function decreaseQuantity(itemId) {
    const item = cart.find(i => i.id === itemId);
    if (item) {
        if (item.quantity > 1) {
            item.quantity -= 1;
        } else {
            removeFromCart(itemId);
            return;
        }
        updateCart();
        saveCartToStorage();
    }
}

function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    updateCart();
    saveCartToStorage();
}

function applyDiscount() {
    const code = discountCodeInput.value.trim().toUpperCase();
    
    if (!code) {
        discountMessage.textContent = 'Please enter a discount code';
        discountMessage.style.color = '#e74c3c';
        return;
    }
    
    if (discountCodes[code]) {
        const discount = discountCodes[code];
        appliedDiscountCode = code;
        
        // Calculate discount based on type
        let discountAmount = 0;
        let discountMessageText = '';
        
        switch(discount.type) {
            case "fixed":
                discountAmount = discount.value;
                discountMessageText = `$${discount.value} off applied!`;
                break;
                
            case "percentage":
                const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                discountAmount = (subtotal * discount.value) / 100;
                discountMessageText = `${discount.value}% off applied!`;
                break;
                
            case "category_percentage":
                discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'percentage');
                discountMessageText = `${discount.value}% off ${discount.category} applied!`;
                break;
                
            case "category_fixed":
                discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'fixed');
                discountMessageText = `$${discount.value} off ${discount.category} applied!`;
                break;
                
            case "product_percentage":
                discountAmount = calculateProductDiscount(discount.productName, discount.value, 'percentage');
                discountMessageText = `${discount.value}% off ${discount.productName} applied!`;
                break;
                
            case "product_fixed":
                discountAmount = calculateProductDiscount(discount.productName, discount.value, 'fixed');
                discountMessageText = `$${discount.value} off ${discount.productName} applied!`;
                break;
                
            case "min_order_percentage":
                const subtotalMinPerc = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                if (subtotalMinPerc >= discount.minAmount) {
                    discountAmount = (subtotalMinPerc * discount.value) / 100;
                    discountMessageText = `${discount.value}% off applied (order over $${discount.minAmount})!`;
                } else {
                    discountMessageText = `Add $${(discount.minAmount - subtotalMinPerc).toFixed(2)} more to get ${discount.value}% off!`;
                    discountMessage.style.color = '#e74c3c';
                    updateCart();
                    return;
                }
                break;
                
            case "min_order_fixed":
                const subtotalMinFixed = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                if (subtotalMinFixed >= discount.minAmount) {
                    discountAmount = discount.value;
                    discountMessageText = `$${discount.value} off applied (order over $${discount.minAmount})!`;
                } else {
                    discountMessageText = `Add $${(discount.minAmount - subtotalMinFixed).toFixed(2)} more to get $${discount.value} off!`;
                    discountMessage.style.color = '#e74c3c';
                    updateCart();
                    return;
                }
                break;
        }
        
        appliedDiscount = discountAmount;
        discountMessage.textContent = discountMessageText;
        discountMessage.style.color = '#27ae60';
        updateCart();
        saveCartToStorage();
        
    } else {
        discountMessage.textContent = 'Invalid discount code';
        discountMessage.style.color = '#e74c3c';
    }
}

// Helper function for category discounts
function calculateCategoryDiscount(category, value, discountType) {
    let discountAmount = 0;
    cart.forEach(item => {
        const menuItem = menuItems.find(mi => mi.id === item.id);
        if (menuItem && menuItem.category === category) {
            if (discountType === 'percentage') {
                discountAmount += (item.price * item.quantity * value) / 100;
            } else if (discountType === 'fixed') {
                // Distribute fixed discount across all items in category
                const categoryItems = cart.filter(cartItem => {
                    const mi = menuItems.find(m => m.id === cartItem.id);
                    return mi && mi.category === category;
                });
                const totalCategoryQuantity = categoryItems.reduce((sum, catItem) => sum + catItem.quantity, 0);
                if (totalCategoryQuantity > 0) {
                    discountAmount += (value / totalCategoryQuantity) * item.quantity;
                }
            }
        }
    });
    return discountAmount;
}

// Helper function for product discounts
function calculateProductDiscount(productName, value, discountType) {
    let discountAmount = 0;
    cart.forEach(item => {
        const menuItem = menuItems.find(mi => mi.id === item.id);
        if (menuItem && menuItem.name.toLowerCase().includes(productName.toLowerCase())) {
            if (discountType === 'percentage') {
                discountAmount += (item.price * item.quantity * value) / 100;
            } else if (discountType === 'fixed') {
                // Apply fixed discount per product instance
                discountAmount += value * item.quantity;
            }
        }
    });
    return discountAmount;
}

function showAddToCartAnimation(itemId) {
    // Find elements
    const addButton = document.querySelector(`.add-to-cart[data-id="${itemId}"]`);
    if (!addButton) return;

    const menuItem = addButton.closest('.menu-item');
    const itemImage = menuItem.querySelector('.item-image');
    const cartIcon = document.getElementById('cartIcon');
    if (!itemImage || !cartIcon) return;

    // Get positions
    const imageRect = itemImage.getBoundingClientRect();
    const cartRect = cartIcon.getBoundingClientRect();

    // Create floating image clone
    const clonedImage = document.createElement('div');
    clonedImage.className = 'cart-item-clone';
    clonedImage.style.backgroundImage = itemImage.style.backgroundImage;
    clonedImage.style.position = 'absolute';
    clonedImage.style.width = `${imageRect.width}px`;
    clonedImage.style.height = `${imageRect.height}px`;
    clonedImage.style.left = `${imageRect.left + window.scrollX}px`;
    clonedImage.style.top = `${imageRect.top + window.scrollY}px`;
    clonedImage.style.backgroundSize = 'cover';
    clonedImage.style.backgroundPosition = 'center';
    clonedImage.style.borderRadius = '15%';
    clonedImage.style.zIndex = 9999;
    clonedImage.style.transition = 'all 2.5s cubic-bezier(0.25, 1, 0.5, 1)';
    clonedImage.style.opacity = '1';

    document.body.appendChild(clonedImage);

    // Force reflow for transition
    void clonedImage.offsetWidth;

    // Animate towards cart
    clonedImage.style.left = `${cartRect.left + window.scrollX + cartRect.width / 2 - imageRect.width / 2}px`;
    clonedImage.style.top = `${cartRect.top + window.scrollY + cartRect.height / 2 - imageRect.height / 2}px`;
    clonedImage.style.transform = 'scale(0.2)';
    clonedImage.style.opacity = '0.3';

    // Clean up after animation
    setTimeout(() => {
        clonedImage.remove();
        // Bounce the cart icon
        cartIcon.style.transition = 'transform 0.3s ease';
        cartIcon.style.transform = 'scale(1.2)';
        setTimeout(() => {
            cartIcon.style.transform = 'scale(1)';
        }, 300);
    }, 1000);
}


// Order sending functionality (simplified - no customer info)
function sendOrder(method) {
    const subtotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    let discountAmount = appliedDiscount;
    let discountDetails = [];

    // Recalculate discount for order message and collect discount details
    if (appliedDiscountCode && discountCodes[appliedDiscountCode]) {
        const discount = discountCodes[appliedDiscountCode];
        
        if (discount.type === "percentage") {
            discountAmount = (subtotal * discount.value) / 100;
            discountDetails.push(`${discount.value}% off entire order`);
        }
        else if (discount.type === "fixed") {
            discountAmount = discount.value;
            discountDetails.push(`$${discount.value} off entire order`);
        }
        else if (discount.type === "category_percentage") {
            discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'percentage');
            const categoryItems = cart.filter(item => {
                const menuItem = menuItems.find(mi => mi.id === item.id);
                return menuItem && menuItem.category === discount.category;
            });
            if (categoryItems.length > 0) {
                discountDetails.push(`${discount.value}% off ${discount.category} category`);
            }
        }
        else if (discount.type === "category_fixed") {
            discountAmount = calculateCategoryDiscount(discount.category, discount.value, 'fixed');
            const categoryItems = cart.filter(item => {
                const menuItem = menuItems.find(mi => mi.id === item.id);
                return menuItem && menuItem.category === discount.category;
            });
            if (categoryItems.length > 0) {
                discountDetails.push(`$${discount.value} off ${discount.category} category`);
            }
        }
        else if (discount.type === "product_percentage") {
            discountAmount = calculateProductDiscount(discount.productName, discount.value, 'percentage');
            const productItems = cart.filter(item => {
                const menuItem = menuItems.find(mi => mi.id === item.id);
                return menuItem && menuItem.name.toLowerCase().includes(discount.productName.toLowerCase());
            });
            if (productItems.length > 0) {
                discountDetails.push(`${discount.value}% off ${discount.productName} items`);
            }
        }
        else if (discount.type === "product_fixed") {
            discountAmount = calculateProductDiscount(discount.productName, discount.value, 'fixed');
            const productItems = cart.filter(item => {
                const menuItem = menuItems.find(mi => mi.id === item.id);
                return menuItem && menuItem.name.toLowerCase().includes(discount.productName.toLowerCase());
            });
            if (productItems.length > 0) {
                discountDetails.push(`$${discount.value} off ${discount.productName} items`);
            }
        }
        else if (discount.type === "min_order_percentage") {
            const subtotalMinPerc = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            if (subtotalMinPerc >= discount.minAmount) {
                discountAmount = (subtotalMinPerc * discount.value) / 100;
                discountDetails.push(`${discount.value}% off (order over $${discount.minAmount})`);
            }
        }
        else if (discount.type === "min_order_fixed") {
            const subtotalMinFixed = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
            if (subtotalMinFixed >= discount.minAmount) {
                discountAmount = discount.value;
                discountDetails.push(`$${discount.value} off (order over $${discount.minAmount})`);
            }
        }
    }

    const totalBeforeServiceCharge = subtotal - discountAmount;
    
    // Calculate service charge (same logic as in updateCart)
    let serviceCharge = 0;
    if (subtotal < 4) {
        serviceCharge = 1;
    }
    
    const total = totalBeforeServiceCharge + serviceCharge;
    
    let orderMessage = `NEW ORDER AlifKH\n\n`;

orderMessage += `üìãOrder Details:\n`;
cart.forEach(item => {
    const originalItemTotal = item.price * item.quantity;
    let itemDiscount = 0;
    
    // Calculate discount per item for display
    if (appliedDiscountCode && discountCodes[appliedDiscountCode]) {
        const discount = discountCodes[appliedDiscountCode];
        const menuItem = menuItems.find(mi => mi.id === item.id);
        
        if (discount.type === "category_percentage" && menuItem && menuItem.category === discount.category) {
            itemDiscount = (item.price * item.quantity * discount.value) / 100;
        }
        else if (discount.type === "category_fixed" && menuItem && menuItem.category === discount.category) {
            const categoryItems = cart.filter(cartItem => {
                const mi = menuItems.find(m => m.id === cartItem.id);
                return mi && mi.category === discount.category;
            });
            const totalCategoryQuantity = categoryItems.reduce((sum, catItem) => sum + catItem.quantity, 0);
            if (totalCategoryQuantity > 0) {
                itemDiscount = (discount.value / totalCategoryQuantity) * item.quantity;
            }
        }
        else if (discount.type === "product_percentage" && menuItem && menuItem.name.toLowerCase().includes(discount.productName.toLowerCase())) {
            itemDiscount = (item.price * item.quantity * discount.value) / 100;
        }
        else if (discount.type === "product_fixed" && menuItem && menuItem.name.toLowerCase().includes(discount.productName.toLowerCase())) {
            itemDiscount = discount.value * item.quantity;
        }
    }
    
    const finalItemTotal = originalItemTotal - itemDiscount;
    
    if (itemDiscount > 0) {
        orderMessage += `‚Ä¢ ${item.name} x ${item.quantity} - $${originalItemTotal.toFixed(2)} - $${itemDiscount.toFixed(2)} discount = $${finalItemTotal.toFixed(2)}\n`;
    } else {
        orderMessage += `‚Ä¢ ${item.name} x ${item.quantity} - $${finalItemTotal.toFixed(2)}\n`;
    }
});

orderMessage += `\nüí∞Payment Summary:\n`;
orderMessage += `Subtotal: $${subtotal.toFixed(2)}\n`;

if (discountAmount > 0) {
    orderMessage += `Discount (${appliedDiscountCode}): -$${discountAmount.toFixed(2)}\n`;
    if (discountDetails.length > 0) {
        discountDetails.forEach(detail => {
            orderMessage += `  - ${detail}\n`;
        });
    }
}

// Add service charge to order message if applicable
if (serviceCharge > 0) {
    orderMessage += `$1 Service Charge bellow $4 order: $${serviceCharge.toFixed(2)}\n`;
}

orderMessage += `*Total: $${total.toFixed(2)}*\n\n`;
orderMessage += `üéâ Discount Applied: ${appliedDiscountCode || 'None'}\n`;
orderMessage += `üåê alifkh.com`;
    
    // Encode the message for URL
    const encodedMessage = encodeURIComponent(orderMessage);
    
    if (method === 'whatsapp') {
        const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodedMessage}`;
        window.open(whatsappUrl, '_blank');
    } else if (method === 'telegram') {
        const cleanTelegramId = telegramId.replace('@', '');
        const telegramUrl = `https://t.me/${cleanTelegramId}?text=${encodedMessage}`;
        const telegramAppUrl = `tg://resolve?domain=${cleanTelegramId}&text=${encodedMessage}`;
        
        window.open(telegramAppUrl, '_blank');
        setTimeout(() => {
            window.open(telegramUrl, '_blank');
        }, 100);
    }
}

// Local storage functions
function saveCartToStorage() {
    const cartData = {
        cart: cart,
        discount: appliedDiscount,
        discountCode: appliedDiscountCode
    };
    localStorage.setItem('alifkhCart', JSON.stringify(cartData));
}

function loadCartFromStorage() {
    const savedCart = localStorage.getItem('alifkhCart');
    if (savedCart) {
        const cartData = JSON.parse(savedCart);
        cart = cartData.cart || [];
        appliedDiscount = cartData.discount || 0;
        appliedDiscountCode = cartData.discountCode || '';
        updateCart();
    }
}

// Carousel functionality
function startCarousel() {
    let currentSlide = 0;
    const slides = document.querySelectorAll('.carousel-item');
    const controls = document.querySelectorAll('.carousel-control');
    
    function showSlide(index) {
        if (index >= slides.length) index = 0;
        if (index < 0) index = slides.length - 1;
        
        document.querySelector('.carousel-inner').style.transform = `translateX(-${index * 100}%)`;
        
        controls.forEach(control => control.classList.remove('active'));
        controls[index].classList.add('active');
        
        currentSlide = index;
    }
    
    setInterval(() => {
        showSlide(currentSlide + 1);
    }, 5000);
    
    controls.forEach(control => {
        control.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            showSlide(index);
        });
    });
}

// PWA functionality
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service-worker.js')
    .then(() => console.log('Service Worker registered'));
}

let deferredPrompt;

window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;
  document.getElementById('installBtn').style.display = 'flex'; // Show the APK link
});

document.getElementById('installBtn').addEventListener('click', async () => {
  if (deferredPrompt) {
    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    console.log(`User response: ${outcome}`);
    deferredPrompt = null;
  } else {
    alert('Install option not available. Use Chrome on Android or Desktop.');
  }
});

// Share functionality
document.getElementById('ShareSite').addEventListener('click', async (e) => {
    e.preventDefault();

    if (navigator.share) {
        const shareMessage = 
            "‡¶≠‡¶æ‡¶á ‡¶∂‡¶ø‡¶π‡¶æ‡¶®‡¶ï‡¶≠‡¶ø‡¶≤‡ßá‡¶∞ ‡¶∏‡¶¨ ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶∞‡ßá‡¶∏‡ßç‡¶ü‡ßÅ‡¶∞‡¶æ‡¶®‡ßç‡¶ü ‡¶è‡¶ü‡¶æ , ‡¶è‡¶¶‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶§‡ßá‡¶Æ‡¶®‡¶ø ‡¶¶‡¶æ‡¶Æ ‡¶è‡¶ï‡ßá‡¶¨‡¶æ‡¶∞‡ßá ‡¶ï‡¶Æ , ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶ï‡ßá ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ö‡ßç‡¶õ‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ , ‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶≤‡ßá ‡¶´‡ßç‡¶∞‡¶ø ‡¶°‡ßá‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡¶ø ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá : " + window.location.href;
        try {
            await navigator.share({
                title: "Great Restaurant!",
                text: shareMessage
            });
            console.log("Thanks for sharing!");
        } catch (err) {
            console.error("Share failed:", err);
        }
    } else {
        alert("Sharing is not supported on this browser.");
    }
});


// idenhi ivdi balvisi likki 10 arba   ###################################################

var clickCount = 0;
var clickDiv = document.getElementById("clickDiv");
var hiddenDiv = document.getElementById("hdn");

if (!clickDiv || !hiddenDiv) {
  console.error("Could not find clickDiv or hiddenDiv");
} else {
  clickDiv.addEventListener("click", function () {
    clickCount++;
    if (clickCount === 5) {
      hiddenDiv.style.display = "block";
    }
  });
}


// Food image expand   ###################################################
(function () {
  if (window.__imagePreviewInitialized) {
    console.log('Image preview already initialized.');
    return;
  }
  window.__imagePreviewInitialized = true;

  const MODAL_ID = '__imagePreviewModal_v2';
  const IMG_ID = '__imagePreviewImg_v2';
  const CLOSE_ID = '__imagePreviewClose_v2';

  // remove old if any
  document.getElementById(MODAL_ID)?.remove();
  document.getElementById(CLOSE_ID)?.remove();

  // Create modal overlay
  const modal = document.createElement('div');
  modal.id = MODAL_ID;
  Object.assign(modal.style, {
    display: 'none',
    position: 'fixed',
    inset: '0',
    background: 'rgba(0,0,0,0.85)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: '2147483646',
    cursor: 'zoom-out',
  });
  modal.setAttribute('role', 'dialog');

  // Image inside modal (pointer-events: none so it doesn't block the close button)
  const modalImg = document.createElement('img');
  modalImg.id = IMG_ID;
  Object.assign(modalImg.style, {
    maxWidth: '90%',
    maxHeight: '85%',
    borderRadius: '10px',
    boxShadow: '0 0 20px rgba(0,0,0,0.9)',
    pointerEvents: 'none',
    userSelect: 'none',
  });

  // Close button (fixed, above modal)
  const closeBtn = document.createElement('button');
  closeBtn.id = CLOSE_ID;
  closeBtn.innerHTML = '&times;';
  Object.assign(closeBtn.style, {
    position: 'fixed',
    top: '18px',
    right: '22px',
    color: 'white',
    fontSize: '40px',
    cursor: 'pointer',
    border: 'none',
    background: 'transparent',
    zIndex: '2147483647',
    padding: '4px 8px',
    lineHeight: '1',
  });

  // append elements
  modal.appendChild(modalImg);
  document.body.appendChild(modal);
  document.body.appendChild(closeBtn);

  // helper: extract URL from element (checks data- attributes, inline style, computed style, or child <img>)
  function extractImageUrl(el) {
    if (!el) return null;
    // dataset fallbacks
    if (el.dataset && (el.dataset.large || el.dataset.src || el.dataset.bg)) {
      return el.dataset.large || el.dataset.src || el.dataset.bg;
    }
    // inline style first
    let bg = el.style && el.style.backgroundImage;
    // computed style if inline empty
    if (!bg || bg === 'none') {
      try {
        bg = window.getComputedStyle(el).backgroundImage;
      } catch (err) {
        bg = null;
      }
    }
    if (bg && bg !== 'none') {
      // extract first url(...) occurrence
      const m = bg.match(/url\((['"]?)(.*?)\1\)/);
      if (m) return m[2];
    }
    // fallback: <img> child or src attribute
    if (el.tagName === 'IMG' && el.src) return el.src;
    const childImg = el.querySelector && el.querySelector('img');
    if (childImg && childImg.src) return childImg.src;
    // last resort: attribute 'data-src' or 'src'
    if (el.getAttribute && (el.getAttribute('data-src') || el.getAttribute('src'))) {
      return el.getAttribute('data-src') || el.getAttribute('src');
    }
    return null;
  }

  // open/close
  function openModal(url) {
    if (!url) {
      console.warn('No image URL found for clicked element.');
      return;
    }
    modalImg.src = url;
    modal.style.display = 'flex';
    closeBtn.style.display = 'block';
    document.body.style.overflow = 'hidden';
  }
  function closeModal() {
    modal.style.display = 'none';
    closeBtn.style.display = 'none';
    modalImg.src = '';
    document.body.style.overflow = '';
  }

  // Delegated click: works even if .item-image are added later and works from console at any time
  document.addEventListener('click', function (ev) {
    const clicked = ev.target.closest ? ev.target.closest('.item-image') : null;
    if (!clicked) return;
    ev.preventDefault();
    const url = extractImageUrl(clicked);
    openModal(url);
  }, true);

  // Close handlers
  closeBtn.addEventListener('click', function (ev) {
    ev.stopPropagation();
    closeModal();
  }, true);

  modal.addEventListener('click', function (ev) {
    // only close when clicking the overlay (not the image, but image has pointer-events:none so this is safe)
    if (ev.target === modal) closeModal();
  }, true);

  // Escape key closes
  document.addEventListener('keydown', function (ev) {
    if (ev.key === 'Escape') closeModal();
  });

  // Hide close button initially
  closeBtn.style.display = 'none';

  console.log('Image preview initialized ‚Äî click any element with class ".item-image" to open a large preview.');
})();
